/**
 * Contain the logic for the question bank modal.
 *
 * @module     mod_hippotrack/modal_hippotrack_question_bank
 * @copyright  2018 Ryan Wyllie <ryan@moodle.com>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define("mod_hippotrack/modal_hippotrack_question_bank", ["jquery", "core/notification", "core/modal", "core/modal_events", "core/modal_registry", "core/fragment", "core_form/changechecker"], (function ($, Notification, Modal, ModalEvents, ModalRegistry, Fragment, FormChangeChecker) { var registered = !1, SELECTORS_ADD_TO_HIPPOTRACK_CONTAINER = "td.addtohippotrackaction", SELECTORS_ANCHOR = "a[href]", SELECTORS_PREVIEW_CONTAINER = "td.previewaction", SELECTORS_SEARCH_OPTIONS = "#advancedsearch", SELECTORS_DISPLAY_OPTIONS = "#displayoptions", SELECTORS_ADD_QUESTIONS_FORM = "form#questionsubmit", ModalHippoTrackQuestionBank = function (root) { Modal.call(this, root), this.contextId = null, this.addOnPageId = null }; return ModalHippoTrackQuestionBank.TYPE = "mod_hippotrack-hippotrack-question-bank", (ModalHippoTrackQuestionBank.prototype = Object.create(Modal.prototype)).constructor = ModalHippoTrackQuestionBank, ModalHippoTrackQuestionBank.prototype.setContextId = function (id) { this.contextId = id }, ModalHippoTrackQuestionBank.prototype.getContextId = function () { return this.contextId }, ModalHippoTrackQuestionBank.prototype.setAddOnPageId = function (id) { this.addOnPageId = id }, ModalHippoTrackQuestionBank.prototype.getAddOnPageId = function () { return this.addOnPageId }, ModalHippoTrackQuestionBank.prototype.show = function () { return this.reloadBodyContent(window.location.search), Modal.prototype.show.call(this) }, ModalHippoTrackQuestionBank.prototype.reloadBodyContent = function (queryString) { var promise = Fragment.loadFragment("mod_hippotrack", "hippotrack_question_bank", this.getContextId(), { querystring: queryString }).fail(Notification.exception); this.setBody(promise) }, ModalHippoTrackQuestionBank.prototype.handleAddToHippoTrackEvent = function (e, anchorElement) { var href = anchorElement.attr("href") + "&addonpage=" + this.getAddOnPageId(); anchorElement.attr("href", href) }, ModalHippoTrackQuestionBank.prototype.handlePreviewContainerEvent = function (e, anchorElement) { window.openpopup(e, { url: anchorElement.attr("href"), name: "questionpreview", options: ["height=600", "width=800", "top=0", "left=0", "menubar=0", "location=0", "scrollbars", "resizable", "toolbar", "status", "directories=0", "fullscreen=0", "dependent"].join(",") }) }, ModalHippoTrackQuestionBank.prototype.handleDisplayOptionFormEvent = function (e) { e.stopPropagation(), e.preventDefault(); var queryString = "?" + $(e.target).closest(SELECTORS_DISPLAY_OPTIONS).serialize(); this.reloadBodyContent(queryString) }, ModalHippoTrackQuestionBank.prototype.registerDisplayOptionListeners = function () { this.getModal().on("change", SELECTORS_DISPLAY_OPTIONS, function (e) { $(e.target).attr("aria-autocomplete") || this.handleDisplayOptionFormEvent(e) }.bind(this)), this.getModal().on("submit", SELECTORS_DISPLAY_OPTIONS, function (e) { this.handleDisplayOptionFormEvent(e) }.bind(this)) }, ModalHippoTrackQuestionBank.prototype.registerEventListeners = function () { Modal.prototype.registerEventListeners.call(this), this.registerDisplayOptionListeners(), this.getModal().on("submit", SELECTORS_ADD_QUESTIONS_FORM, function (e) { var formElement = $(e.currentTarget); $("<input />").attr("type", "hidden").attr("name", "addonpage").attr("value", this.getAddOnPageId()).appendTo(formElement) }.bind(this)), this.getModal().on("click", SELECTORS_ANCHOR, function (e) { var anchorElement = $(e.currentTarget); anchorElement.closest(SELECTORS_ADD_TO_HIPPOTRACK_CONTAINER).length ? this.handleAddToHippoTrackEvent(e, anchorElement) : anchorElement.closest(SELECTORS_PREVIEW_CONTAINER).length ? this.handlePreviewContainerEvent(e, anchorElement) : anchorElement.closest(SELECTORS_SEARCH_OPTIONS).length || (e.preventDefault(), this.reloadBodyContent(anchorElement.prop("search"))) }.bind(this)), this.getRoot().on(ModalEvents.bodyRendered, (function () { FormChangeChecker.disableAllChecks() })) }, registered || (ModalRegistry.register(ModalHippoTrackQuestionBank.TYPE, ModalHippoTrackQuestionBank, "core/modal"), registered = !0), ModalHippoTrackQuestionBank }));

//# sourceMappingURL=modal_hippotrack_question_bank.min.js.map